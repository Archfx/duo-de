From b9c27e955cd166cd574ecb7ee2a620bfbd3e1763 Mon Sep 17 00:00:00 2001
From: Archfx <cybx@live.com>
Date: Mon, 14 Oct 2024 22:39:30 -0400
Subject: [PATCH] ARCHFX/DUO-DE posture processor integration

Change-Id: I4525b14c3cd6944547a7e3dc800642016c674c95
---
 .../display/DisplayManagerGlobal.java         | 17 +++++++++++++++++
 .../hardware/display/IDisplayManager.aidl     |  3 +++
 .../window/common/CommonFoldingFeature.java   |  2 +-
 .../server/display/DisplayManagerService.java | 19 +++++++++++++++++++
 .../policy/DeviceStateProviderImpl.java       |  6 ++++++
 .../java/com/android/server/SystemServer.java | 15 +++++++++++++++
 6 files changed, 61 insertions(+), 1 deletion(-)

diff --git a/core/java/android/hardware/display/DisplayManagerGlobal.java b/core/java/android/hardware/display/DisplayManagerGlobal.java
index 85197221e651..d5a7eb19ff71 100644
--- a/core/java/android/hardware/display/DisplayManagerGlobal.java
+++ b/core/java/android/hardware/display/DisplayManagerGlobal.java
@@ -34,6 +34,8 @@ import android.content.res.Resources;
 import android.graphics.ColorSpace;
 import android.graphics.Point;
 import android.hardware.OverlayProperties;
+import android.hardware.display.IDisplayManager;
+import android.hardware.display.DisplayManagerInternal;
 import android.hardware.display.DisplayManager.DisplayListener;
 import android.hardware.graphics.common.DisplayDecorationSupport;
 import android.media.projection.IMediaProjection;
@@ -119,6 +121,9 @@ public final class DisplayManagerGlobal {
     @UnsupportedAppUsage
     private static DisplayManagerGlobal sInstance;
 
+    @UnsupportedAppUsage
+    private static IDisplayManager sDisplayManagerService;
+
     // Guarded by mLock
     private boolean mDispatchNativeCallbacks = false;
     private float mNativeCallbackReportedRefreshRate;
@@ -189,6 +194,18 @@ public final class DisplayManagerGlobal {
         }
     }
 
+    @UnsupportedAppUsage
+    public static IDisplayManager getDisplayManagerService() {
+        synchronized (DisplayManagerGlobal.class) {
+            if (sDisplayManagerService == null) {
+                sDisplayManagerService = IDisplayManager.Stub.asInterface(
+                    ServiceManager.getService(Context.DISPLAY_SERVICE)
+                );
+            }
+            return sDisplayManagerService;
+        }
+    }
+
     /**
      * Get information about a particular logical display.
      *
diff --git a/core/java/android/hardware/display/IDisplayManager.aidl b/core/java/android/hardware/display/IDisplayManager.aidl
index b7c02b0d0720..527a232e742e 100644
--- a/core/java/android/hardware/display/IDisplayManager.aidl
+++ b/core/java/android/hardware/display/IDisplayManager.aidl
@@ -220,6 +220,9 @@ interface IDisplayManager {
     // Query for DISPLAY_DECORATION support.
     DisplayDecorationSupport getDisplayDecorationSupport(int displayId);
 
+    // set display offsets for logical display
+    void setDisplayOffsets(int displayId, int x, int y);
+
     // This method is to support behavior that was calling hidden APIs. The caller was requesting
     // to set the layerStack after the display was created, which is not something we support in
     // DMS. This should be deleted in V release.
diff --git a/libs/WindowManager/Jetpack/src/androidx/window/common/CommonFoldingFeature.java b/libs/WindowManager/Jetpack/src/androidx/window/common/CommonFoldingFeature.java
index e37dea4dfd69..9803ba1f0af8 100644
--- a/libs/WindowManager/Jetpack/src/androidx/window/common/CommonFoldingFeature.java
+++ b/libs/WindowManager/Jetpack/src/androidx/window/common/CommonFoldingFeature.java
@@ -213,7 +213,7 @@ public final class CommonFoldingFeature {
     private final Rect mRect;
 
     CommonFoldingFeature(int type, @State int state, @NonNull Rect rect) {
-        assertReportableState(state);
+        // assertReportableState(state);
         this.mType = type;
         this.mState = state;
         if (rect.width() == 0 && rect.height() == 0) {
diff --git a/services/core/java/com/android/server/display/DisplayManagerService.java b/services/core/java/com/android/server/display/DisplayManagerService.java
index 670d59c09e06..940dccfd4c1c 100644
--- a/services/core/java/com/android/server/display/DisplayManagerService.java
+++ b/services/core/java/com/android/server/display/DisplayManagerService.java
@@ -4667,6 +4667,25 @@ public final class DisplayManagerService extends SystemService {
             DisplayManagerService.this.mDisplayModeDirector.requestDisplayModes(
                     token, displayId, modeIds);
         }
+
+        @Override
+        public void setDisplayOffsets(int displayId, int x, int y) {
+            synchronized (mSyncRoot) {
+                final LogicalDisplay display = mLogicalDisplayMapper.getDisplayLocked(displayId);
+                if (display == null) {
+                    return;
+                }
+                if (display.getDisplayOffsetXLocked() != x
+                        || display.getDisplayOffsetYLocked() != y) {
+                    if (DEBUG) {
+                        Slog.d(TAG, "Display " + displayId + " offset set to ("
+                                + x + ", " + y + ")");
+                    }
+                    display.setDisplayOffsetsLocked(x, y);
+                    scheduleTraversalLocked(false);
+                }
+            }
+        }    
     }
 
     private static boolean isValidBrightness(float brightness) {
diff --git a/services/core/java/com/android/server/policy/DeviceStateProviderImpl.java b/services/core/java/com/android/server/policy/DeviceStateProviderImpl.java
index 453c6ef41437..ec7fcecdf573 100644
--- a/services/core/java/com/android/server/policy/DeviceStateProviderImpl.java
+++ b/services/core/java/com/android/server/policy/DeviceStateProviderImpl.java
@@ -765,6 +765,12 @@ public final class DeviceStateProviderImpl implements DeviceStateProvider,
             return configFileFromDataDir;
         }
 
+        final File configFileFromSystemDir = Environment.buildPath(Environment.getRootDirectory(),
+                VENDOR_CONFIG_FILE_PATH, CONFIG_FILE_NAME);
+        if (configFileFromSystemDir .exists()) {
+            return configFileFromSystemDir;
+        }
+
         final File configFileFromVendorDir = Environment.buildPath(Environment.getVendorDirectory(),
                 VENDOR_CONFIG_FILE_PATH, CONFIG_FILE_NAME);
         if (configFileFromVendorDir.exists()) {
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 107c2947c550..92e85837b8de 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -2951,6 +2951,14 @@ public final class SystemServer implements Dumpable {
         }
         t.traceEnd();
 
+        t.traceBegin("PostureProcessorService");
+        try {
+            startPostureProcessor(context);
+        } catch (Throwable e) {
+            reportWtf("starting " + "com.thain.duo.PostureProcessorService", e);
+        }
+        t.traceEnd();
+
         t.traceBegin("GameManagerService");
         mSystemServiceManager.startService(GameManagerService.Lifecycle.class);
         t.traceEnd();
@@ -3460,6 +3468,13 @@ public final class SystemServer implements Dumpable {
         t.traceEnd();
     }
 
+    private static void startPostureProcessor(Context context) {
+        PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);
+        Intent intent = new Intent();
+        intent.setComponent(ComponentName.unflattenFromString("com.thain.duo/.PostureProcessorService"));
+        context.startServiceAsUser(intent, UserHandle.SYSTEM);
+    }    
+
     private static void startSystemUi(Context context, WindowManagerService windowManager) {
         PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);
         Intent intent = new Intent();
-- 
2.34.1

