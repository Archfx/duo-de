From cf33ad128805fa0cfeac51d337714ebadd9cadfc Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Thu, 24 Aug 2023 15:58:15 -0300
Subject: [PATCH 39/52] Fix brightness slider curve for some devices

Some devices report max brightness as 2047 or 4095
---
 .../settingslib/display/BrightnessUtils.java      | 15 ++++++++++-----
 .../brightness/shared/model/GammaBrightness.kt    | 14 +++++++-------
 2 files changed, 17 insertions(+), 12 deletions(-)

diff --git a/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java b/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java
index 66ed10433459..f6820b4436fc 100644
--- a/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java
+++ b/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java
@@ -16,13 +16,18 @@
 
 package com.android.settingslib.display;
 
+import android.os.SystemProperties;
 import android.util.MathUtils;
 
+import com.android.internal.display.BrightnessSynchronizer;
+
 /** Utility methods for calculating the display brightness. */
 public class BrightnessUtils {
 
+    public static final boolean LowGammaBrightness = Boolean.parseBoolean(SystemProperties.get("persist.sys.phh.low_gamma_brightness", "false"));
+
     public static final int GAMMA_SPACE_MIN = 0;
-    public static final int GAMMA_SPACE_MAX = 65535;
+    public static final int GAMMA_SPACE_MAX = LowGammaBrightness ? 255 : 65535;
 
     // Hybrid Log Gamma constant values
     private static final float R = 0.5f;
@@ -88,9 +93,8 @@ public class BrightnessUtils {
         // it shouldn't be out of bounds.
         final float normalizedRet = MathUtils.constrain(ret, 0, 12);
 
-        // Re-normalize to the range [0, 1]
-        // in order to derive the correct setting value.
-        return MathUtils.lerp(min, max, normalizedRet / 12);
+        return LowGammaBrightness ? MathUtils.constrain(BrightnessSynchronizer.brightnessIntToFloat(val),
+                         min, max) : MathUtils.lerp(min, max, normalizedRet / 12);
     }
 
     /**
@@ -137,6 +141,7 @@ public class BrightnessUtils {
             ret = A * MathUtils.log(normalizedVal - B) + C;
         }
 
-        return Math.round(MathUtils.lerp(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, ret));
+        return LowGammaBrightness ? BrightnessSynchronizer.brightnessFloatToInt(
+                       MathUtils.constrain(val, min, max)) : Math.round(MathUtils.lerp(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, ret));
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/brightness/shared/model/GammaBrightness.kt b/packages/SystemUI/src/com/android/systemui/brightness/shared/model/GammaBrightness.kt
index 7eba6268869c..b7a9d5f535b4 100644
--- a/packages/SystemUI/src/com/android/systemui/brightness/shared/model/GammaBrightness.kt
+++ b/packages/SystemUI/src/com/android/systemui/brightness/shared/model/GammaBrightness.kt
@@ -23,13 +23,13 @@ import com.android.systemui.util.kotlin.pairwiseBy
 import kotlinx.coroutines.flow.Flow
 
 @JvmInline
-value class GammaBrightness(
-    @IntRange(
-        from = BrightnessUtils.GAMMA_SPACE_MIN.toLong(),
-        to = BrightnessUtils.GAMMA_SPACE_MAX.toLong()
-    )
-    val value: Int
-)
+value class GammaBrightness(val value: Int) {
+    init {
+        require(value in BrightnessUtils.GAMMA_SPACE_MIN..BrightnessUtils.GAMMA_SPACE_MAX) {
+            "Value must be in range ${BrightnessUtils.GAMMA_SPACE_MIN} to ${BrightnessUtils.GAMMA_SPACE_MAX}"
+        }
+    }
+}
 
 internal fun Flow<GammaBrightness>.logDiffForTable(
     tableLogBuffer: TableLogBuffer,
-- 
2.34.1

