From b007a8a1555c785f0945cfb92ed1d9059f7be921 Mon Sep 17 00:00:00 2001
From: Peter Cai <peter@typeblog.net>
Date: Wed, 24 Aug 2022 10:41:29 -0400
Subject: [PATCH 1/8] gd: hci: Ignore unexpected status events

For some reason, on some old devices, the controller will report a
remote to support SNIFF_SUBRATING even when it does not. Just ignore the
error here (the status event comes from the failure response).

Change-Id: Ifb9a65fd77f21d15a8dc1ced9240194d38218ef6
---
 system/gd/hci/hci_layer.cc | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/system/gd/hci/hci_layer.cc b/system/gd/hci/hci_layer.cc
index fe5fa33d18..9c411fb31f 100644
--- a/system/gd/hci/hci_layer.cc
+++ b/system/gd/hci/hci_layer.cc
@@ -230,13 +230,13 @@ struct HciLayer::impl {
           command_complete_view.IsValid(), "assert failed: command_complete_view.IsValid()");
       (*command_queue_.front().GetCallback<CommandCompleteView>())(command_complete_view);
     } else {
-      log::assert_that(
-          command_queue_.front().waiting_for_status_ == is_status,
-          "{} was not expecting {} event",
-          OpCodeText(op_code),
-          logging_id);
-
-      (*command_queue_.front().GetCallback<TResponse>())(std::move(response_view));
+      if (command_queue_.front().waiting_for_status_ == is_status) {
+        (*command_queue_.front().GetCallback<TResponse>())(std::move(response_view));
+      } else {
+        CommandCompleteView command_complete_view = CommandCompleteView::Create(
+            EventView::Create(PacketView<kLittleEndian>(std::make_shared<std::vector<uint8_t>>(std::vector<uint8_t>()))));
+        (*command_queue_.front().GetCallback<CommandCompleteView>())(std::move(command_complete_view));
+      }
     }
 
 #ifdef TARGET_FLOSS
-- 
2.34.1

